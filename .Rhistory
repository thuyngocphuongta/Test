install.packages("tidyverse")
install.packages("forcats")
install.packages("nycflights13")
library(tidyverse)
library(forcats)
library(nycflights13)
library(tidyverse)
library(forcats)
library(nycflights13)
library()
library(testthat)
install.packages("testthat")
library(testthat)
devtools::use_testthat()
library(lubridate)
test_that("floor_date works for different units", {
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
expect_equal(floor_date(base, "second"),
as.POSIXct("2009-08-03 12:01:59", tz = "UTC"))
expect_equal(floor_date(base, "minute"),
as.POSIXct("2009-08-03 12:01:00", tz = "UTC"))
expect_equal(floor_date(base, "hour"),
as.POSIXct("2009-08-03 12:00:00", tz = "UTC"))
expect_equal(floor_date(base, "day"),
as.POSIXct("2009-08-03 00:00:00", tz = "UTC"))
expect_equal(floor_date(base, "week"),
as.POSIXct("2009-08-02 00:00:00", tz = "UTC"))
expect_equal(floor_date(base, "month"),
as.POSIXct("2009-08-01 00:00:00", tz = "UTC"))
expect_equal(floor_date(base, "year"),
as.POSIXct("2009-01-01 00:00:00", tz = "UTC"))
})
test_that("floor_date works for different units", {
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
floor_base <- function(unit) floor_date(base, unit)
as_time <- function(x) as.POSIXct(x, tz = "UTC")
expect_equal(floor_base("second"), as_time("2009-08-03 12:01:59"))
expect_equal(floor_base("minute"), as_time("2009-08-03 12:01:00"))
expect_equal(floor_base("hour"),   as_time("2009-08-03 12:00:00"))
expect_equal(floor_base("day"),    as_time("2009-08-03 00:00:00"))
expect_equal(floor_base("week"),   as_time("2009-08-02 00:00:00"))
expect_equal(floor_base("month"),  as_time("2009-08-01 00:00:00"))
expect_equal(floor_base("year"),   as_time("2009-01-01 00:00:00"))
})
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
expect_floor_equal <- function(unit, time) {
expect_equal(floor_date(base, unit), as.POSIXct(time, tz = "UTC"))
}
expect_floor_equal("year", "2009-01-01 00:00:00")
expect_floor_equal("year", "2008-01-01 00:00:00")
expect_floor_equal <- function(unit, time) {
as_time <- function(x) as.POSIXct(x, tz = "UTC")
eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))
}
expect_floor_equal("year", "2008-01-01 00:00:00")
expect_floor_equal("year", "2008-01-01 00:00:00")
test_that("floor_date works for different units", {
as_time <- function(x) as.POSIXct(x, tz = "UTC")
expect_floor_equal <- function(unit, time) {
eval(bquote(expect_equal(floor_date(base, .(unit)), as_time(.(time)))))
}
base <- as_time("2009-08-03 12:01:59.23")
expect_floor_equal("second", "2009-08-03 12:01:59")
expect_floor_equal("minute", "2009-08-03 12:01:00")
expect_floor_equal("hour",   "2009-08-03 12:00:00")
expect_floor_equal("day",    "2009-08-03 00:00:00")
expect_floor_equal("week",   "2009-08-02 00:00:00")
expect_floor_equal("month",  "2009-08-01 00:00:00")
expect_floor_equal("year",   "2009-01-01 00:00:00")
})
nycflights13
read(nycflight13)
summary(nycflight13)
min_seats <-
max_seats <-
get_planes_by_seats <-
#--------------------------------------------------------------------------------------------------------
# Aufgabe 1b:
# Im Folgenden interessiert man sich nur für die Modellbezeichnungen von Flugzeugen mit einer Sitzanzahl
# in einer gewissen Spanne (wie in 1a).
# Erstellen Sie eine Funktion `plane_model_by_seats`, welche einen Vektor der Modellbezeichnungen
# zurückgibt. Jeder Modelltyp soll in diesem Vektor nur einmal vorkommen und der Vektor soll vom Typ `character` sein.
# Die Argumente der Funktion sollen dieselben wie in Aufgabe 1a) sein.
# Tipp: Sie können die in Aufgabe 1a) geschriebene Funktion `get_planes_by_seats` hier wiederverwenden.
# ------------------------------------------------------------------------------------------------------
# Aufgabe 1
sex <- c("männlich", "weiblich", "weiblich", "männlich", "weiblich")
sexf <- as.factor(sex)
summary(sexf)
table(sexf)
levels(sexf) <- c("male", "female")
sexf
# Aufgabe 2
car_speed <- c("normal", "langsam", "langsam", "normal", "schnell")
ordered(car_speed)
# Aufgabe 3
matrix(1:9, nrow = 3, ncol = 3)
# Aufgabe 4
str(mtcars)
dim(mtcars)
# Aufgabe 3
dim(matrix(1:9, nrow = 3, ncol = 3))
# Aufgabe 3
dim(matrix(1:9, nrow = 3, ncol = 4))
# Aufgabe 3
dim(matrix(1:12, nrow = 3, ncol = 4))
names(mtcars)
colnames(mtcars)
mtcars[mtcars$cyl==6,]
view(mtcars)
View(expect_floor_equal)
view(mtcars)
mtcars
mtcars[rownames(mtcars)=="Ferrari Dino",]
mtcars[1:5,c("cyl", "vs")]
library(ggplot2) # Grafiken
library(reshape2) # Datentransformation long/wide format
library(dplyr) # Datenmanipulation
library(car)
library(multcomp)
library(ggplot2) # Grafiken
library(reshape2) # Datentransformation long/wide format
library(dplyr) # Datenmanipulation
library(car)
library(multcomp)
install.packages("car")
install.packages("installr")
library(installr)
library(installr)
